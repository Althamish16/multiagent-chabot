import React, { createContext, useContext, useState, useEffect } from 'react';
import axios from 'axios';

const AuthContext = createContext();

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (!context) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

export const AuthProvider = ({ children }) => {
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [token, setToken] = useState(localStorage.getItem('auth_token'));

    const BACKEND_URL = 'http://localhost:5000';
    const API = `${BACKEND_URL}/api`;

    useEffect(() => {
        if (token) {
            // Set default authorization header
            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            // Verify token and get user info
            getCurrentUser();
        } else {
            setLoading(false);
        }
    }, [token]);

    const getCurrentUser = async () => {
        try {
            const response = await axios.get(`${API}/auth/me`);
            setUser(response.data);
        } catch (error) {
            console.error('Failed to get current user:', error);
            // Token might be invalid, remove it
            logout();
        } finally {
            setLoading(false);
        }
    };

    const login = async () => {
        try {
            const response = await axios.get(`${API}/auth/login`);
            const { auth_url } = response.data;
            
            console.log('Opening Google OAuth popup...');
            
            // Open Google OAuth in popup
            const popup = window.open(
                auth_url,
                'google-oauth',
                'width=500,height=600,scrollbars=yes,resizable=yes'
            );

            if (!popup || popup.closed || typeof popup.closed === 'undefined') {
                throw new Error('Popup was blocked by the browser. Please allow popups for this site.');
            }

            return new Promise((resolve, reject) => {
                let isResolved = false;
                
                // Listen for messages from the popup
                const handleMessage = (event) => {
                    console.log('Received postMessage:', event.data);
                    
                    // Verify origin for security
                    if (event.origin !== window.location.origin) {
                        console.warn('Received message from unexpected origin:', event.origin, 'expected:', window.location.origin);
                        return;
                    }
                    
                    if (event.data.type === 'auth-success') {
                        console.log('Authentication successful!');
                        if (isResolved) return;
                        isResolved = true;
                        
                        window.removeEventListener('message', handleMessage);
                        clearInterval(checkClosed);
                        clearTimeout(timeoutId);
                        
                        // Store the token and user data from the message
                        const { access_token, user_profile, session_id } = event.data;
                        if (access_token) {
                            console.log('Storing auth token and user profile');
                            localStorage.setItem('auth_token', access_token);
                            setToken(access_token);
                            setUser(user_profile);
                        }
                        
                        resolve(true);
                    } else if (event.data.type === 'auth-error') {
                        console.error('Authentication error:', event.data.error);
                        if (isResolved) return;
                        isResolved = true;
                        
                        window.removeEventListener('message', handleMessage);
                        clearInterval(checkClosed);
                        clearTimeout(timeoutId);
                        reject(new Error(event.data.error || 'Authentication failed'));
                    }
                };

                // Listen for the popup to complete with a timeout
                let timeoutId;
                let popupCheckAttempts = 0;
                const maxCheckAttempts = 300; // 5 minutes worth of checks
                
                const checkClosed = setInterval(() => {
                    popupCheckAttempts++;
                    
                    // If we've exceeded max attempts, stop checking
                    if (popupCheckAttempts > maxCheckAttempts) {
                        clearInterval(checkClosed);
                        return;
                    }
                    
                    try {
                        // Try to access popup.closed safely
                        if (popup && popup.closed) {
                            if (!isResolved) {
                                console.warn('Popup was closed by user');
                                isResolved = true;
                                clearInterval(checkClosed);
                                clearTimeout(timeoutId);
                                window.removeEventListener('message', handleMessage);
                                reject(new Error('Authentication was cancelled. Please try again.'));
                            }
                        }
                    } catch (error) {
                        // If we can't access popup.closed due to COOP, silently continue
                        // The message listener will handle success/failure
                    }
                }, 1000);

                // Set a timeout to prevent hanging indefinitely
                timeoutId = setTimeout(() => {
                    if (!isResolved) {
                        console.error('Authentication timeout');
                        isResolved = true;
                        clearInterval(checkClosed);
                        window.removeEventListener('message', handleMessage);
                        reject(new Error('Authentication timeout. Please try again.'));
                    }
                }, 5 * 60 * 1000); // 5 minutes timeout

                console.log('Listening for authentication messages...');
                window.addEventListener('message', handleMessage);
            });
        } catch (error) {
            console.error('Login failed:', error);
            throw error;
        }
    };

    const logout = () => {
        localStorage.removeItem('auth_token');
        setToken(null);
        setUser(null);
        delete axios.defaults.headers.common['Authorization'];
    };

    const handleAuthCallback = async (code) => {
        try {
            const response = await axios.post(`${API}/auth/callback`, {
                code,
                redirect_uri: window.location.origin + '/auth/google/callback'
            });
            
            const { access_token, user_profile } = response.data;
            
            localStorage.setItem('auth_token', access_token);
            setToken(access_token);
            setUser(user_profile);
            
            return true;
        } catch (error) {
            console.error('Auth callback failed:', error);
            throw error;
        }
    };

    const value = {
        user,
        loading,
        isAuthenticated: !!user,
        login,
        logout,
        handleAuthCallback,
        token
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};